name: Autograding Tests
on:
  workflow_run:
    workflows: [Continuous Deploy]
    types:
      - completed

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  assignment-grader:
    runs-on: ubuntu-latest
    environment:
      name: AWS_DEPLOYMENT
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Grading
        run: echo "==== Start Grading Assignment02 ===="

      - name: Download Grader Environment Variables
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: grader-env

      - name: Set Grader Environment Variables
        run: |
          source grader-env.txt

          echo "WEBAPP_EC2_HOST=$WEBAPP_HOST" >> $GITHUB_ENV
          echo "WEBAPP_EC2_USER=$WEBAPP_USER" >> $GITHUB_ENV
          echo "MYSQL_PRIVATE_IP=$MYSQL_PRIVATE_IP" >> $GITHUB_ENV
          echo "DATABASE_USER_NAME=$DATABASE_USER_NAME" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV

          echo "MOVIE_INGEST_COMMAND=$MOVIE_INGEST_COMMAND" >> $GITHUB_ENV

          echo "WEBAPP_INSTANCE_ID=$WEBAPP_INSTANCE_ID" >> $GITHUB_ENV
          echo "WEBAPP_SG=$WEBAPP_SG" >> $GITHUB_ENV
          echo "MYSQL_INSTANCE_ID=$MYSQL_INSTANCE_ID" >> $GITHUB_ENV
          echo "MYSQL_SG=$MYSQL_SG" >> $GITHUB_ENV
          echo "IGW_ID=$IGW_ID" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_ID=$PUBLIC_SUBNET_ID" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_ID=$PRIVATE_SUBNET_ID" >> $GITHUB_ENV
          echo "ROUTE_TABLE_ID=$ROUTE_TABLE_ID" >> $GITHUB_ENV
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Check Assignment 2
        continue-on-error: true
        run: |
          ssh -o StrictHostKeyChecking=no $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST << 'EOF'

          echo "Connected to EC2 instance"

          if [ ! -d /tmp/assignment02-grader-result ]; then
            mkdir /tmp/assignment02-grader-result
          fi

          # Check [GET] /v1/healthcheck
          curl -vvvv -X GET http://localhost:8080/v1/healthcheck > /tmp/assignment02-grader-result/healthcheck-get-result.txt 2>&1 || true

          # Check [POST] /v1/healthcheck
          curl -vvvv -X POST http://localhost:8080/v1/healthcheck > /tmp/assignment02-grader-result/healthcheck-post-result.txt 2>&1 || true

          # Check [PUT] /v1/healthcheck
          curl -vvvv -X PUT http://localhost:8080/v1/healthcheck > /tmp/assignment02-grader-result/healthcheck-put-result.txt 2>&1 || true

          # Check [PATCH] /v1/healthcheck
          curl -vvvv -X PATCH http://localhost:8080/v1/healthcheck > /tmp/assignment02-grader-result/healthcheck-patch-result.txt 2>&1 || true

          # Check [DELETE] /v1/healthcheck
          curl -vvvv -X DELETE http://localhost:8080/v1/healthcheck > /tmp/assignment02-grader-result/healthcheck-delete-result.txt 2>&1 || true

          # Check with parameters [GET] /v1/healthcheck?name=John
          curl -vvvv -X GET http://localhost:8080/v1/healthcheck?name=John > /tmp/assignment02-grader-result/healthcheck-get-params-result.txt 2>&1 || true

          EOF

      - name: Check Assignment 3a - Database Connection
        continue-on-error: true
        run: |
          ssh -o StrictHostKeyChecking=no $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST << 'EOF'

          echo "Connected to EC2 instance"

          if [ ! -d /tmp/assignment03-grader-result ]; then
            mkdir /tmp/assignment03-grader-result
          fi

          # Check [GET] /v1/healthcheck
          curl -vvvv -X GET http://localhost:8080/v1/healthcheck > /tmp/assignment03-grader-result/healthcheck-get-result-with-database-connection.txt 2>&1 || true

          # Disable MySQL connection
          sudo iptables -A OUTPUT -p tcp --dport 3306 -j DROP
          sleep 5

          # Check [GET] /v1/healthcheck
          curl -m 5 -vvvv -X GET http://localhost:8080/v1/healthcheck > /tmp/assignment03-grader-result/healthcheck-get-result-without-database-connection-1.txt 2>&1 || true
          sleep 5
          curl -m 5 -vvvv -X GET http://localhost:8080/v1/healthcheck > /tmp/assignment03-grader-result/healthcheck-get-result-without-database-connection-2.txt 2>&1 || true

          # Enable MySQL connection
          sudo iptables -D OUTPUT -p tcp --dport 3306 -j DROP

          # Check [GET] /v1/healthcheck
          curl -vvvv -X GET http://localhost:8080/v1/healthcheck > /tmp/assignment03-grader-result/healthcheck-get-result-with-resume-database-connection.txt 2>&1 || true

          EOF

      - name: Check Assignment 3b - /v1/movie/{id}
        continue-on-error: true
        run: |
          ssh -o StrictHostKeyChecking=no $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST << 'EOF'

          echo "Connected to EC2 instance"

          if [ ! -d /tmp/assignment03-grader-result ]; then
            mkdir /tmp/assignment03-grader-result
          fi

          # Check [GET] /v1/movie/1
          # expect 200 OK 
          # expect response body:
          # {"movie":{"movie_id":1,"title":"Toy Story (1995)","genres":"Adventure|Animation|Children|Comedy|Fantasy"}}
          curl -vvvv -X GET http://localhost:8080/v1/movie/1 > /tmp/assignment03-grader-result/movie-1-get-result.txt 2>&1 || true

          # Check [GET] /v1/movie/999999
          # expect 400 Bad Request
          curl -vvvv -X GET http://localhost:8080/v1/movie/999999 > /tmp/assignment03-grader-result/movie-not-exist-get-result.txt 2>&1 || true

          # Disable MySQL connection
          sudo iptables -A OUTPUT -p tcp --dport 3306 -j DROP
          sleep 5
          
          # Check [GET] /v1/movie/1
          # expect 503 Service Unavailable
          curl -m 5 -vvvv -X GET http://localhost:8080/v1/movie/1 > /tmp/assignment03-grader-result/movie-without-database-connection-1.txt 2>&1 || true
          sleep 5
          curl -m 5 -vvvv -X GET http://localhost:8080/v1/movie/1 > /tmp/assignment03-grader-result/movie-without-database-connection-2.txt 2>&1 || true

          # Enable MySQL connection
          sudo iptables -D OUTPUT -p tcp --dport 3306 -j DROP

          EOF

      - name: Check Assignment 3c - ingest_movies shell
        continue-on-error: true
        run: |
          scp -o StrictHostKeyChecking=no -r ./grader-env.txt $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST:./

          ssh -o StrictHostKeyChecking=no $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST << 'EOF'
          
          echo "Connected to EC2 instance"

          source grader-env.txt

          sudo apt install mysql-client-core-8.0 -y

          echo "Get row count from movies table"

          echo "-- testing ---"
          echo "mysql -h $MYSQL_PRIVATE_IP -u $DATABASE_USER_NAME -p $DATABASE_PASSWORD -D recommend -e 'SELECT COUNT(*) FROM movies;'"

          row_count=$(mysql -h $MYSQL_PRIVATE_IP -u $DATABASE_USER_NAME -p$DATABASE_PASSWORD -D recommend -e "SELECT COUNT(*) FROM movies;" -N | tail -n 1)
          echo "Row count: $row_count"
          
          $MOVIE_INGEST_COMMAND

          echo "Get row count from movies table"
          new_row_count=$(mysql -h $MYSQL_PRIVATE_IP -u $DATABASE_USER_NAME -p$DATABASE_PASSWORD -D recommend -e "SELECT COUNT(*) FROM movies;" -N | tail -n 1)

          # expect there should be same row count
          if [ "$row_count" -eq "$new_row_count" ]; then
            echo "Row count is the same" > /tmp/assignment03-grader-result/ingest-movies-command-check-result.txt
          else
            echo "Row count is different" > /tmp/assignment03-grader-result/ingest-movies-command-check-result.txt
          fi

          EOF

      - name: Copy Grading Result
        run: |
          scp -o StrictHostKeyChecking=no -r $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST:/tmp/assignment02-grader-result ./
          scp -o StrictHostKeyChecking=no -r $WEBAPP_EC2_USER@$WEBAPP_EC2_HOST:/tmp/assignment03-grader-result ./
          echo "Grading result copied to local machine"

      - name: Check Ok Status
        id: check-ok-status
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Check Ok Status
          command: python3 -m grader.assignment2.check_ok_status
          timeout: 10
          max-score: 10

      - name: Check Wrong Method
        id: check-wrong-method
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Check Wrong Method
          command: python3 -m grader.assignment2.check_wrong_method
          timeout: 10
          max-score: 10

      - name: Check No Parameter
        id: check-no-parameter
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Check No Parameter
          command: python3 -m grader.assignment2.check_no_param
          timeout: 10
          max-score: 10

      - name: Grade 3A - Database Connection
        id: grade-3a
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Grade 3A - Database Connection
          command: python3 -m grader.assignment3.check_3a_database_connection
          timeout: 10
          max-score: 10

      - name: Grade 3B - /v1/movie/{id}
        id: grade-3b
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Grade 3B - /v1/movie/{id}
          command: python3 -m grader.assignment3.check_3b_movie_endpoint
          timeout: 10
          max-score: 10

      - name: Grade 3C - ingest_movies shell
        id: grade-3c
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: Grade 3C - ingest_movies shell
          command: python3 -m grader.assignment3.check_3c_movie_ingest_command
          timeout: 10
          max-score: 10

      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          CHECK-OK-STATUS_RESULTS: "${{steps.check-ok-status.outputs.result}}"
          CHECK-WRONG-METHOD_RESULTS: "${{steps.check-wrong-method.outputs.result}}"
          CHECK-NO-PARAMETER_RESULTS: "${{steps.check-no-parameter.outputs.result}}"
          GRADE-3A_RESULTS: "${{steps.grade-3a.outputs.result}}"
          GRADE-3B_RESULTS: "${{steps.grade-3b.outputs.result}}"
          GRADE-3C_RESULTS: "${{steps.grade-3c.outputs.result}}"
        with:
          runners: check-ok-status,check-wrong-method,check-no-parameter,grade-3a,grade-3b,grade-3c

      - name: Configure AWS Credentialsg
        uses: aws-actions/configure-aws-credentials@v2
        if: always()
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terminate and Delete Aws Resources
        if: always()
        run: |
          echo "Terminating and deleting all aws resources..."

          # Terminate EC2 Instances
          if [ -n "$WEBAPP_INSTANCE_ID" ]; then
            echo "Terminating WebApp EC2 Instance: $WEBAPP_INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids $WEBAPP_INSTANCE_ID
          fi

          if [ -n "$MYSQL_INSTANCE_ID" ]; then
            echo "Terminating MySQL EC2 Instance: $MYSQL_INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids $MYSQL_INSTANCE_ID
          fi

          # Wait for EC2 instances to terminate
          echo "Waiting for instances to terminate..."
          if [ -n "$WEBAPP_INSTANCE_ID" ]; then
            aws ec2 wait instance-terminated --instance-ids $WEBAPP_INSTANCE_ID
          fi
          if [ -n "$MYSQL_INSTANCE_ID" ]; then
            aws ec2 wait instance-terminated --instance-ids $MYSQL_INSTANCE_ID
          fi

          sleep 20

          # Detach and Delete Internet Gateway
          if [ -n "$IGW_ID" ]; then
            echo "Detaching and deleting Internet Gateway: $IGW_ID"
            aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
            aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
          fi

          # Delete Security Groups
          if [ -n "$MYSQL_SG" ]; then
            echo "Deleting MySQL Security Group: $MYSQL_SG"
            aws ec2 delete-security-group --group-id $MYSQL_SG
          fi
          if [ -n "$WEBAPP_SG" ]; then
            echo "Deleting WebApp Security Group: $WEBAPP_SG"
            aws ec2 delete-security-group --group-id $WEBAPP_SG
          fi
          
          # Delete Subnets
          if [ -n "$PUBLIC_SUBNET_ID" ]; then
            echo "Deleting Public Subnet: $PUBLIC_SUBNET_ID"
            aws ec2 delete-subnet --subnet-id $PUBLIC_SUBNET_ID
          fi
          if [ -n "$PRIVATE_SUBNET_ID" ]; then
            echo "Deleting Private Subnet: $PRIVATE_SUBNET_ID"
            aws ec2 delete-subnet --subnet-id $PRIVATE_SUBNET_ID
          fi

          # Delete Route Table
          if [ -n "$ROUTE_TABLE_ID" ]; then
            echo "Deleting Route Table: $ROUTE_TABLE_ID"
            aws ec2 delete-route-table --route-table-id $ROUTE_TABLE_ID
          fi

          # Delete VPC
          if [ -n "$VPC_ID" ]; then
            echo "Deleting VPC: $VPC_ID"
            aws ec2 delete-vpc --vpc-id $VPC_ID
          fi

          echo "All resources have been terminated and deleted."
