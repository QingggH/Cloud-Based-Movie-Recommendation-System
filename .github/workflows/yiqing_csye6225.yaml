name: Continuous Deploy
#
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    name: Deploy CloudFormation and Start EC2
    runs-on: ubuntu-latest
    environment: AWS_DEPLOYMENT

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Step 3: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file vpc.yaml \
            --stack-name MyVPCStack \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              WebAppKeyName=${{ secrets.EC2_KEY_NAME }} \
              MySQLKeyName=${{ secrets.EC2_KEY_NAME }}

      # Step 4: Get EC2 Instance Public and Private IPs
      - name: Get EC2 Instance Info
        run: |
          WEBAPP_INSTANCE_ID=$(aws cloudformation describe-stack-resources \
            --stack-name MyVPCStack \
            --query "StackResources[?LogicalResourceId=='WebAppEC2Instance'].PhysicalResourceId" \
            --output text)

          MYSQL_INSTANCE_ID=$(aws cloudformation describe-stack-resources \
            --stack-name MyVPCStack \
            --query "StackResources[?LogicalResourceId=='MySQLEC2Instance'].PhysicalResourceId" \
            --output text)

          WEBAPP_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $WEBAPP_INSTANCE_ID \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

          MYSQL_PRIVATE_IP=$(aws ec2 describe-instances \
            --instance-ids $MYSQL_INSTANCE_ID \
            --query 'Reservations[*].Instances[*].PrivateIpAddress' \
            --output text)

          echo "WEBAPP_PUBLIC_IP=$WEBAPP_PUBLIC_IP" >> $GITHUB_ENV
          echo "MYSQL_PRIVATE_IP=$MYSQL_PRIVATE_IP" >> $GITHUB_ENV

      # Step 5: Deploy WebApp Code
      - name: Deploy WebApp to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ env.WEBAPP_PUBLIC_IP }} <<EOF
            sudo apt-get update
            sudo apt-get install -y python3 python3-venv python3-pip
            rm -rf /home/ubuntu/webapp
            mkdir -p /home/ubuntu/webapp
          EOF
          scp -o StrictHostKeyChecking=no -i ec2_key.pem -r ./* ubuntu@${{ env.WEBAPP_PUBLIC_IP }}:/home/ubuntu/webapp
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ env.WEBAPP_PUBLIC_IP }} <<EOF
            cd /home/ubuntu/webapp
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            nohup python3 app.py > app.log 2>&1 &
          EOF

      # Step 6: Populate MySQL Database
      - name: Populate MySQL Database
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ env.WEBAPP_PUBLIC_IP }} <<EOF
            cd /home/ubuntu/webapp
            python3 movies_ingest.py --host ${MYSQL_PRIVATE_IP} --user <YourUser> --password <YourPassword> --database recommend --file movies.csv
          EOF

      # Step 7: Healthcheck
      - name: Run Healthcheck
        run: |
          curl -f http://${{ env.WEBAPP_PUBLIC_IP }}/v1/healthcheck || exit 1

      # Step 8: Output Info
      - name: Output Deployment Info
        run: |
          echo "WebApp deployed successfully at http://${{ env.WEBAPP_PUBLIC_IP }}"
