name: Continuous Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: AWS_DEPLOYMENT

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH key
      - name: Set up SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 3: Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2 # Change this to your desired AWS region

      # Step 4: Get EC2 Public IP
      - name: Get EC2 Public IP
        id: ec2info
        run: |
          INSTANCE_ID=i-039c1f8227270d4e5
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # Step 5: Remove old files from EC2
      - name: Remove old files from EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP <<EOF
          rm -rf /home/ubuntu/my_flask_app
          EOF
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}

      # Step 6: Copy files to EC2
      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ./* ubuntu@$PUBLIC_IP:/home/ubuntu/my_flask_app

      # Step 7: Deploy application to EC2
      - name: Deploy Code to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP <<EOF
          # Update package list and install Python3 and virtualenv
          sudo apt-get update
          sudo apt-get install -y python3 python3-venv python3-pip

          # Create a directory for the application
          mkdir -p /home/ubuntu/my_flask_app
          cd /home/ubuntu/my_flask_app

          # Create and activate virtual environment
          python3 -m venv venv
          source venv/bin/activate

          # Install dependencies
          pip install -r requirements.txt

          # Run the test.py file
          nohup python3 test.py > test.log 2>&1 &
          EOF
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}

      - name: Setup Variables for Grader Workflow
        run: |
          echo "SSH_HOST=${{ env.PUBLIC_IP }}" > grader-env.txt
          echo "SSH_USER=ubuntu" >> grader-env.txt

      - name: Upload Grader Environment Variables
        uses: actions/upload-artifact@v4
        with:
          name: grader-env
          path: grader-env.txt
